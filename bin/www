#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const config = require('../config/config');
const logger = require('../lib/logger');
const fs = require('fs');
const https = require('https');
const http = require('http');

const models = require("../models");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(config['port']);
app.set('port', port);

/**
 * Create HTTPS/HTTP server.
 */
if (config['enable_https']) {
    if (config['force_https_redirect']) {
        httpsRedirect();
    }
    const options = {
        key: fs.readFileSync(config['https_private_key']),
        cert: fs.readFileSync(config['https_certificate'])
    };
    const server = https.createServer(options, app);
    start(server);
} else {
    const server = http.createServer(app);
    start(server);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * https redirect
 */
function httpsRedirect() {
    const server = http.createServer();
    server.on('request', require('redirect-https')({
        port: port
    }));
    server.on('error', function (error) {
        if (error.syscall !== 'listen') {
            throw error;
        }
        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                logger.error('Not enough privileges to use port 80. Force https redirect failed');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                logger.error('Port 80 is already in use. Force https redirect failed');
                process.exit(1);
                break;
            default:
                throw error;
        }
    });
    server.on('listening', function () {
        logger.debug('express-boilerplate is listening on port 80. Force https redirect enabled');
    });
    server.listen(80);
}

/**
 * start main server
 * @param server
 */
function start(server) {

    models.sequelize.sync().then(() => {

        server.listen(port);
        server.on('error', onError);
        server.on('listening', onListening);

    });

    function onError(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }
        const bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port;
        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                logger.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                logger.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }
    }

    function onListening() {
        const bind = typeof port === 'string'
            ? 'pipe ' + port
            : 'port ' + port;
        logger.debug('express-boilerplate is listening on ' + bind);
    }

}